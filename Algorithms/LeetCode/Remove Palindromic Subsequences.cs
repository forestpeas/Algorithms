namespace Algorithms.LeetCode
{
    /* 1332. Remove Palindromic Subsequences
     * 
     * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s. 
     * Return the minimum number of steps to make the given string empty.
     * 
     * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing
     * its order. A string is called palindrome if is one that reads the same backward as well as forward.
     * 
     * Example 1:
     * 
     * Input: s = "ababa"
     * Output: 1
     * Explanation: String is already palindrome
     * 
     * Example 2:
     * 
     * Input: s = "abb"
     * Output: 2
     * Explanation: "abb" -> "bb" -> "". 
     * Remove palindromic subsequence "a" then "bb".
     * 
     * Example 3:
     * 
     * Input: s = "baabb"
     * Output: 2
     * Explanation: "baabb" -> "b" -> "". 
     * Remove palindromic subsequence "baab" then "b".
     * 
     * Example 4:
     * 
     * Input: s = ""
     * Output: 0
     */
    public class Remove_Palindromic_Subsequences
    {
        public int RemovePalindromeSub(string s)
        {
            if (string.IsNullOrEmpty(s)) return 0;
            if (IsPalindrome(s)) return 1;
            return 2; // Remove all 'a', then all 'b'.
        }
        private bool IsPalindrome(string s)
        {
            int start = 0, end = s.Length - 1;
            while (start < end)
            {
                if (s[start++] != s[end--]) return false;
            }
            return true;
        }
    }
}
